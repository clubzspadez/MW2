class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL).then(e=>{e&&e.json().then(e=>{t(null,e)})}).catch(e=>{t(e,null),console.log(`Fetch Error: ${e}`)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((t,l)=>{if(t)e(t,null);else{const t=l.find((t,e)=>t.id===e+1);t?e(null,t):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((l,a)=>{if(l)e(l,null);else{const l=a.filter(e=>e.cuisine_type==t);e(null,l)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((l,a)=>{if(l)e(l,null);else{const l=a.filter(e=>e.neighborhood==t);e(null,l)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,l){DBHelper.fetchRestaurants((a,n)=>{if(a)l(a,null);else{let a=n;"all"!=t&&(a=a.filter(e=>e.cuisine_type==t)),"all"!=e&&(a=a.filter(t=>t.neighborhood==e)),l(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,l)=>{if(e)t(e,null);else{const e=l.map((t,e)=>l[e].neighborhood),a=e.filter((t,l)=>e.indexOf(t)==l);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,l)=>{if(e)t(e,null);else{const e=l.map((t,e)=>l[e].cuisine_type),a=e.filter((t,l)=>e.indexOf(t)==l);t(null,a)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`img/${t.id}.jpg`}static altForRestaurant(t){return`${t.alt}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}
let restaurants,neighborhoods,cuisines;var map,markers=[];document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines(),registerWorker()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,s=t.selectedIndex,n=e[r].value,o=t[s].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,o,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),r=document.createElement("img");r.className="restaurant-img",r.src=DBHelper.imageUrlForRestaurant(e),r.alt=DBHelper.altForRestaurant(e),t.append(r);const s=document.createElement("h1");s.innerHTML=e.name,t.append(s);const n=document.createElement("p");n.innerHTML=e.neighborhood,t.append(n);const o=document.createElement("p");o.innerHTML=e.address,t.append(o);const a=document.createElement("a");return a.innerHTML="View Details",a.href=DBHelper.urlForRestaurant(e),t.append(a),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),registerWorker=(()=>{"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(e=>{console.log("Registration successful, scope is:",e.scope)}).catch(e=>{console.log("Service worker registration failed, error: ",e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiaGVscGVyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJEQkhlbHBlciIsIkRBVEFCQVNFX1VSTCIsIltvYmplY3QgT2JqZWN0XSIsImNhbGxiYWNrIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsInJlc3RhdXJhbnRzIiwiY29uc29sZSIsImVyciIsImxvZyIsImlkIiwiZXJyb3IiLCJyZXN0YXVyYW50IiwiZmluZCIsImluZGV4IiwiY3Vpc2luZSIsImZldGNoUmVzdGF1cmFudHMiLCJyZXN1bHRzIiwiZmlsdGVyIiwiciIsImN1aXNpbmVfdHlwZSIsIm5laWdoYm9yaG9vZCIsImZldGNoTmVpZ2hib3Job29kcyIsInVuaXF1ZU5laWdoYm9yaG9vZHMiLCJuZWlnaGJvcmhvb2RzIiwibWFwIiwidiIsImkiLCJjdWlzaW5lcyIsInVuaXF1ZUN1aXNpbmVzIiwiaW5kZXhPZiIsIm1hcmtlciIsImdvb2dsZSIsImFsdCIsIm1hcHMiLCJNYXJrZXIiLCJwb3NpdGlvbiIsImxhdGxuZyIsInRpdGxlIiwibmFtZSIsInVybCIsInVybEZvclJlc3RhdXJhbnQiLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJEUk9QIiwibWFya2VycyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZmV0Y2hDdWlzaW5lcyIsInJlZ2lzdGVyV29ya2VyIiwic2VsZiIsImZpbGxOZWlnaGJvcmhvb2RzSFRNTCIsInNlbGVjdCIsImdldEVsZW1lbnRCeUlkIiwiZm9yRWFjaCIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ2YWx1ZSIsImFwcGVuZCIsImZpbGxDdWlzaW5lc0hUTUwiLCJ3aW5kb3ciLCJpbml0TWFwIiwiTWFwIiwiem9vbSIsImNlbnRlciIsImxhdCIsImxuZyIsInNjcm9sbHdoZWVsIiwidXBkYXRlUmVzdGF1cmFudHMiLCJjU2VsZWN0IiwiblNlbGVjdCIsImNJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJuSW5kZXgiLCJmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QiLCJmaWxsUmVzdGF1cmFudHNIVE1MIiwicmVzZXRSZXN0YXVyYW50cyIsInVsIiwibSIsInNldE1hcCIsImFkZE1hcmtlcnNUb01hcCIsImNyZWF0ZVJlc3RhdXJhbnRIVE1MIiwiaW1hZ2UiLCJzcmMiLCJpbWFnZVVybEZvclJlc3RhdXJhbnQiLCJjbGFzc05hbWUiLCJsaSIsImFkZHJlc3MiLCJtb3JlIiwiaHJlZiIsImxvY2F0aW9uIiwicHVzaCIsIm1hcE1hcmtlckZvclJlc3RhdXJhbnQiLCJhZGRMaXN0ZW5lciIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInJlZ2lzdHJhdGlvbiIsInNjb3BlIiwiY2F0Y2giXSwibWFwcGluZ3MiOiJBQUlBLE1BQU1BLFNBS0pDLDBCQUVFLE1BQVEsb0NBTVZDLHdCQUF3QkMsR0FDdEJDLE1BQU1KLFNBQVNDLGNBRVhJLEtBQUtDLElBQ0hBLEdBR0VBLEVBQUFDLE9BQU1DLEtBQUFBLElBRFJMLEVBQUEsS0FFaUJLLE9BTW5CQyxNQUFBQSxJQWJKTixFQUFBTyxFQUFBLE1BZURELFFBQUFFLG9CQUFBRCxPQU9DViwyQkFBQVksRUFBMkJDLEdBRXZCVixTQUFBQSxpQkFBQSxDQUFBVSxFQUFBTCxLQUNELEdBRkRLLEVBR0VWLEVBQU1XLEVBQUFBLFVBR0ZBLENBQ0YsTUFBQUEsRUFBQU4sRUFBQU8sS0FDQVosQ0FBQUEsRUFBQUEsSUFBZVcsRUFBQUEsS0FBZkUsRUFBQSxHQUVBRixFQUVEWCxFQUFBLEtBQUFXLEdBR05YLEVBQUEsNEJBQUEsU0FTS0EsZ0NBQUFjLEVBQUFkLEdBRUFILFNBQUFrQixpQkFBQSxDQUFBTCxFQUFBTCxLQUNBLEdBQUFLLEVBQ0FWLEVBQVNVLEVBQU1NLFVBQ2hCLENBRUosTUFBQUEsRUFBQVgsRUFBQVksT0FBQUMsR0FBQUEsRUFBQUMsY0FBQUwsR0FIS2QsRUFBUyxLQUFNZ0IsTUFZZmhCLHFDQUFBb0IsRUFBQXBCLEdB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LE9BQU92QyxHQUVWLE1BQU1vRSxFQUFVM0MsU0FBU1csY0FBekIsS0FDQWdDLEVBQVEvQixVQUFZOUMsRUFBVzZFLGFBQy9CRCxFQUFHNUIsT0FBTzZCLEdBRVYsTUFBTUMsRUFBTzVDLFNBQVNXLGNBQVQsS0FDYmlDLEVBQUtoQyxVQUFZOUMsRUFBakI2RSxRQUNBQyxFQUFBQSxPQUFBRCxHQUZBLE1BQU1DLEVBQU81QyxTQUFTVyxjQUFjLEtBS3BDLE9BQUFpQyxFQUFBaEMsVUFBQSxlQTFCRmdDLEVBQUFDLEtBQUE3RixTQUFBMkMsaUJBQUE3QixHQXdCRTRFLEVBQUc1QixPQUFPOEIsR0FFSEYsSUFVTHhELGdCQUFZZ0IsRUFBQUEsRUFBWkcsS0FBOEJwQixlQUM1QitCLEVBQU84QixRQUFTRCxJQUVsQnhDLE1BQUtOLEVBQVFnRCxTQUFiQyx1QkFBQWxGLEVBQUF1QyxLQUFBMUIsS0FORk8sT0FBQUUsS0FBQWMsTUFBQStDLFlBQUFoRSxFQUFBLFFBQUEsS0FERitCLE9BQUE4QixTQUFBRCxLQUFBNUQsRUFBQVMsTUFXQVUsS0FBQUEsUUFBaUIyQyxLQUFBOUQsT0FNVm1CLGVBQ00xQyxNQUNMRCxrQkFBWXlGLFdBQ2JBLFVBUEhDLGNBUURDLFNBQUEsVUFWSC9GLEtBQUFnRyxJQUtRNUYsUUFBUUUsSUFBSSxxQ0FBc0MwRixFQUFhQyxTQUVoRUMsTUFBTTdGLElBQ0xELFFBQVFFLElBQUksOENBQStDRCIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29tbW9uIGRhdGFiYXNlIGhlbHBlciBmdW5jdGlvbnMuXHJcbiAqL1xyXG5cclxuY2xhc3MgREJIZWxwZXIge1xyXG4gIC8qKlxyXG4gICAqIERhdGFiYXNlIFVSTC5cclxuICAgKiBDaGFuZ2UgdGhpcyB0byByZXN0YXVyYW50cy5qc29uIGZpbGUgbG9jYXRpb24gb24geW91ciBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgc3RhdGljIGdldCBEQVRBQkFTRV9VUkwoKSB7XHJcbiAgICBjb25zdCBwb3J0ID0gMTMzNzsgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBzZXJ2ZXIgcG9ydFxyXG4gICAgcmV0dXJuIGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH0vcmVzdGF1cmFudHNgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIHJlc3RhdXJhbnRzLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRzKGNhbGxiYWNrKSB7XHJcbiAgICBmZXRjaChEQkhlbHBlci5EQVRBQkFTRV9VUkwpXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgaWYgKCFyZXMpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzLmpzb24oKS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN0YXVyYW50cyA9IGRhdGE7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnRzKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgRmV0Y2ggRXJyb3I6ICR7ZXJyfWApO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGEgcmVzdGF1cmFudCBieSBpdHMgSUQuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBmZXRjaCBhbGwgcmVzdGF1cmFudHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHJlc3RhdXJhbnQgPSByZXN0YXVyYW50cy5maW5kKFxyXG4gICAgICAgICAgKG9iaiwgaW5kZXgpID0+IG9ialtcImlkXCJdID09PSBpbmRleCArIDFcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChyZXN0YXVyYW50KSB7XHJcbiAgICAgICAgICAvLyBHb3QgdGhlIHJlc3RhdXJhbnRcclxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0IGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgICAgY2FsbGJhY2soXCJSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0XCIsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgdHlwZSB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lKGN1aXNpbmUsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHMgIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZChuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gRmlsdGVyIHJlc3RhdXJhbnRzIHRvIGhhdmUgb25seSBnaXZlbiBuZWlnaGJvcmhvb2RcclxuICAgICAgICBjb25zdCByZXN1bHRzID0gcmVzdGF1cmFudHMuZmlsdGVyKHIgPT4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoXHJcbiAgICBjdWlzaW5lLFxyXG4gICAgbmVpZ2hib3Job29kLFxyXG4gICAgY2FsbGJhY2tcclxuICApIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcmVzdWx0cyA9IHJlc3RhdXJhbnRzO1xyXG4gICAgICAgIGlmIChjdWlzaW5lICE9IFwiYWxsXCIpIHtcclxuICAgICAgICAgIC8vIGZpbHRlciBieSBjdWlzaW5lXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5laWdoYm9yaG9vZCAhPSBcImFsbFwiKSB7XHJcbiAgICAgICAgICAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hOZWlnaGJvcmhvb2RzKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBuZWlnaGJvcmhvb2RzIGZyb20gYWxsIHJlc3RhdXJhbnRzXHJcbiAgICAgICAgY29uc3QgbmVpZ2hib3Job29kcyA9IHJlc3RhdXJhbnRzLm1hcChcclxuICAgICAgICAgICh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5uZWlnaGJvcmhvb2RcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcihcclxuICAgICAgICAgICh2LCBpKSA9PiBuZWlnaGJvcmhvb2RzLmluZGV4T2YodikgPT0gaVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlTmVpZ2hib3Job29kcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIGN1aXNpbmVzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaEN1aXNpbmVzKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIGNvbnN0IGN1aXNpbmVzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5jdWlzaW5lX3R5cGUpO1xyXG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gY3Vpc2luZXNcclxuICAgICAgICBjb25zdCB1bmlxdWVDdWlzaW5lcyA9IGN1aXNpbmVzLmZpbHRlcihcclxuICAgICAgICAgICh2LCBpKSA9PiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGlcclxuICAgICAgICApO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZUN1aXNpbmVzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxyXG4gICAqL1xyXG4gIHN0YXRpYyB1cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIHJldHVybiBgLi9yZXN0YXVyYW50Lmh0bWw/aWQ9JHtyZXN0YXVyYW50LmlkfWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IGltYWdlIFVSTC5cclxuICAgKi9cclxuICBzdGF0aWMgaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIHJldHVybiBgaW1nLyR7cmVzdGF1cmFudC5pZH0uanBnYDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgYWx0IGRlc2NyaXB0aW9uLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBhbHRGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIHJldHVybiBgJHtyZXN0YXVyYW50LmFsdH1gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFwIG1hcmtlciBmb3IgYSByZXN0YXVyYW50LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIG1hcCkge1xyXG4gICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XHJcbiAgICAgIHBvc2l0aW9uOiByZXN0YXVyYW50LmxhdGxuZyxcclxuICAgICAgdGl0bGU6IHJlc3RhdXJhbnQubmFtZSxcclxuICAgICAgdXJsOiBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpLFxyXG4gICAgICBtYXA6IG1hcCxcclxuICAgICAgYW5pbWF0aW9uOiBnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWFya2VyO1xyXG4gIH1cclxufVxyXG4iLCJsZXQgcmVzdGF1cmFudHMsIG5laWdoYm9yaG9vZHMsIGN1aXNpbmVzO1xyXG52YXIgbWFwO1xyXG52YXIgbWFya2VycyA9IFtdO1xyXG5cclxuLyoqXHJcbiAqIEZldGNoIG5laWdoYm9yaG9vZHMgYW5kIGN1aXNpbmVzIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG4gKi9cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZXZlbnQgPT4ge1xyXG4gIGZldGNoTmVpZ2hib3Job29kcygpO1xyXG4gIGZldGNoQ3Vpc2luZXMoKTtcclxuICByZWdpc3RlcldvcmtlcigpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyBhbmQgc2V0IHRoZWlyIEhUTUwuXHJcbiAqL1xyXG5mZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XHJcbiAgREJIZWxwZXIuZmV0Y2hOZWlnaGJvcmhvb2RzKChlcnJvciwgbmVpZ2hib3Job29kcykgPT4ge1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIC8vIEdvdCBhbiBlcnJvclxyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYubmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHM7XHJcbiAgICAgIGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldCBuZWlnaGJvcmhvb2RzIEhUTUwuXHJcbiAqL1xyXG5maWxsTmVpZ2hib3Job29kc0hUTUwgPSAobmVpZ2hib3Job29kcyA9IHNlbGYubmVpZ2hib3Job29kcykgPT4ge1xyXG4gIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmVpZ2hib3Job29kcy1zZWxlY3RcIik7XHJcbiAgbmVpZ2hib3Job29kcy5mb3JFYWNoKG5laWdoYm9yaG9vZCA9PiB7XHJcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgb3B0aW9uLmlubmVySFRNTCA9IG5laWdoYm9yaG9vZDtcclxuICAgIG9wdGlvbi52YWx1ZSA9IG5laWdoYm9yaG9vZDtcclxuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxyXG4gKi9cclxuZmV0Y2hDdWlzaW5lcyA9ICgpID0+IHtcclxuICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKChlcnJvciwgY3Vpc2luZXMpID0+IHtcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICAvLyBHb3QgYW4gZXJyb3IhXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VsZi5jdWlzaW5lcyA9IGN1aXNpbmVzO1xyXG4gICAgICBmaWxsQ3Vpc2luZXNIVE1MKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0IGN1aXNpbmVzIEhUTUwuXHJcbiAqL1xyXG5maWxsQ3Vpc2luZXNIVE1MID0gKGN1aXNpbmVzID0gc2VsZi5jdWlzaW5lcykgPT4ge1xyXG4gIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3Vpc2luZXMtc2VsZWN0XCIpO1xyXG5cclxuICBjdWlzaW5lcy5mb3JFYWNoKGN1aXNpbmUgPT4ge1xyXG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBjdWlzaW5lO1xyXG4gICAgb3B0aW9uLnZhbHVlID0gY3Vpc2luZTtcclxuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIEdvb2dsZSBtYXAsIGNhbGxlZCBmcm9tIEhUTUwuXHJcbiAqL1xyXG53aW5kb3cuaW5pdE1hcCA9ICgpID0+IHtcclxuICBsZXQgbG9jID0ge1xyXG4gICAgbGF0OiA0MC43MjIyMTYsXHJcbiAgICBsbmc6IC03My45ODc1MDFcclxuICB9O1xyXG4gIHNlbGYubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKSwge1xyXG4gICAgem9vbTogMTIsXHJcbiAgICBjZW50ZXI6IGxvYyxcclxuICAgIHNjcm9sbHdoZWVsOiBmYWxzZVxyXG4gIH0pO1xyXG4gIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50cy5cclxuICovXHJcbnVwZGF0ZVJlc3RhdXJhbnRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImN1aXNpbmVzLXNlbGVjdFwiKTtcclxuICBjb25zdCBuU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZWlnaGJvcmhvb2RzLXNlbGVjdFwiKTtcclxuXHJcbiAgY29uc3QgY0luZGV4ID0gY1NlbGVjdC5zZWxlY3RlZEluZGV4O1xyXG4gIGNvbnN0IG5JbmRleCA9IG5TZWxlY3Quc2VsZWN0ZWRJbmRleDtcclxuXHJcbiAgY29uc3QgY3Vpc2luZSA9IGNTZWxlY3RbY0luZGV4XS52YWx1ZTtcclxuICBjb25zdCBuZWlnaGJvcmhvb2QgPSBuU2VsZWN0W25JbmRleF0udmFsdWU7XHJcblxyXG4gIERCSGVscGVyLmZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChcclxuICAgIGN1aXNpbmUsXHJcbiAgICBuZWlnaGJvcmhvb2QsXHJcbiAgICAoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIC8vIEdvdCBhbiBlcnJvciFcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNldFJlc3RhdXJhbnRzKHJlc3RhdXJhbnRzKTtcclxuICAgICAgICBmaWxsUmVzdGF1cmFudHNIVE1MKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENsZWFyIGN1cnJlbnQgcmVzdGF1cmFudHMsIHRoZWlyIEhUTUwgYW5kIHJlbW92ZSB0aGVpciBtYXAgbWFya2Vycy5cclxuICovXHJcbnJlc2V0UmVzdGF1cmFudHMgPSByZXN0YXVyYW50cyA9PiB7XHJcbiAgLy8gUmVtb3ZlIGFsbCByZXN0YXVyYW50c1xyXG4gIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcclxuICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdGF1cmFudHMtbGlzdFwiKTtcclxuICB1bC5pbm5lckhUTUwgPSBcIlwiO1xyXG5cclxuICAvLyBSZW1vdmUgYWxsIG1hcCBtYXJrZXJzXHJcbiAgc2VsZi5tYXJrZXJzLmZvckVhY2gobSA9PiBtLnNldE1hcChudWxsKSk7XHJcbiAgc2VsZi5tYXJrZXJzID0gW107XHJcbiAgc2VsZi5yZXN0YXVyYW50cyA9IHJlc3RhdXJhbnRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhbGwgcmVzdGF1cmFudHMgSFRNTCBhbmQgYWRkIHRoZW0gdG8gdGhlIHdlYnBhZ2UuXHJcbiAqL1xyXG5maWxsUmVzdGF1cmFudHNIVE1MID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN0YXVyYW50cy1saXN0XCIpO1xyXG4gIHJlc3RhdXJhbnRzLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XHJcbiAgICB1bC5hcHBlbmQoY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCkpO1xyXG4gIH0pO1xyXG4gIGFkZE1hcmtlcnNUb01hcCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwuXHJcbiAqL1xyXG5jcmVhdGVSZXN0YXVyYW50SFRNTCA9IHJlc3RhdXJhbnQgPT4ge1xyXG4gIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG5cclxuICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgaW1hZ2UuY2xhc3NOYW1lID0gXCJyZXN0YXVyYW50LWltZ1wiO1xyXG4gIGltYWdlLnNyYyA9IERCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICBpbWFnZS5hbHQgPSBEQkhlbHBlci5hbHRGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gIGxpLmFwcGVuZChpbWFnZSk7XHJcblxyXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XHJcbiAgbmFtZS5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5hbWU7XHJcbiAgbGkuYXBwZW5kKG5hbWUpO1xyXG5cclxuICBjb25zdCBuZWlnaGJvcmhvb2QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICBuZWlnaGJvcmhvb2QuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uZWlnaGJvcmhvb2Q7XHJcbiAgbGkuYXBwZW5kKG5laWdoYm9yaG9vZCk7XHJcblxyXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICBhZGRyZXNzLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuYWRkcmVzcztcclxuICBsaS5hcHBlbmQoYWRkcmVzcyk7XHJcblxyXG4gIGNvbnN0IG1vcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICBtb3JlLmlubmVySFRNTCA9IFwiVmlldyBEZXRhaWxzXCI7XHJcbiAgbW9yZS5ocmVmID0gREJIZWxwZXIudXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICBsaS5hcHBlbmQobW9yZSk7XHJcblxyXG4gIHJldHVybiBsaTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGQgbWFya2VycyBmb3IgY3VycmVudCByZXN0YXVyYW50cyB0byB0aGUgbWFwLlxyXG4gKi9cclxuYWRkTWFya2Vyc1RvTWFwID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gIHJlc3RhdXJhbnRzLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XHJcbiAgICAvLyBBZGQgbWFya2VyIHRvIHRoZSBtYXBcclxuICAgIGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgc2VsZi5tYXApO1xyXG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCBcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIudXJsO1xyXG4gICAgfSk7XHJcbiAgICBzZWxmLm1hcmtlcnMucHVzaChtYXJrZXIpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxucmVnaXN0ZXJXb3JrZXIgPSAoKSA9PiB7XHJcbiAgaWYgKFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvcikge1xyXG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcclxuICAgICAgLnJlZ2lzdGVyKFwiL3N3LmpzXCIpXHJcbiAgICAgIC50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCwgc2NvcGUgaXM6XCIsIHJlZ2lzdHJhdGlvbi5zY29wZSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZCwgZXJyb3I6IFwiLCBlcnIpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn07XHJcbiJdfQ==
