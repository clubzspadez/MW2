class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL).then(e=>{e&&e.json().then(e=>{const r=e;idb.open("restv1Db",1,t=>{switch(t.oldVersion){case 0:t.createObjectStore("restaurants",{keyPath:"id"})}}).then(t=>{const e=t.transaction("restaurant","readwrite").objectStore("restaurants");return r.forEach(t=>{e.put(t)}),e.getAll()}),t(null,r)})}).catch(e=>{t(e,null),console.log(`Fetch Error: ${e}`)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.find((t,e)=>t.id===e+1);t?e(null,t):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=t&&(a=a.filter(e=>e.cuisine_type==t)),"all"!=e&&(a=a.filter(t=>t.neighborhood==e)),r(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`img/${t.id}.jpg`}static altForRestaurant(t){return`${t.alt}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}
let restaurants,neighborhoods,cuisines;var map,markers=[];document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines(),registerWorker()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,s=t.selectedIndex,n=e[r].value,o=t[s].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,o,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),r=document.createElement("img");r.className="restaurant-img",r.src=DBHelper.imageUrlForRestaurant(e),r.alt=DBHelper.altForRestaurant(e),t.append(r);const s=document.createElement("h1");s.innerHTML=e.name,t.append(s);const n=document.createElement("p");n.innerHTML=e.neighborhood,t.append(n);const o=document.createElement("p");o.innerHTML=e.address,t.append(o);const a=document.createElement("a");return a.innerHTML="View Details",a.href=DBHelper.urlForRestaurant(e),t.append(a),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),registerWorker=(()=>{"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(e=>{console.log("Registration successful, scope is:",e.scope)}).catch(e=>{console.log("Service worker registration failed, error: ",e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
