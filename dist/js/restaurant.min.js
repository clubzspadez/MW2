class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDb(){return idb.open("restv1Db",1,t=>{t.createObjectStore("restaurants",{keyPath:"id"})})}static cacheRest(){const t=DBHelper.openDb();if(t)return t.then(t=>{if(!t)return;return t.transaction("restaurant","readwrite").objectStore("restaurants").getAll()})}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL).then(e=>{e&&e.json().then(e=>{t(null,e)})}).catch(e=>{t(e,null),console.log(`Fetch Error: ${e}`)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.find((t,e)=>t.id===e+1);t?e(null,t):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=t&&(a=a.filter(e=>e.cuisine_type==t)),"all"!=e&&(a=a.filter(t=>t.neighborhood==e)),r(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`img/${t.id}.jpg`}static altForRestaurant(t){return`${t.alt}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}
let restaurant;var map;window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const l=document.createElement("td");l.innerHTML=e[n],r.appendChild(l),t.appendChild(r)}}),fillReviewsHTML=((e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML=e.date,t.appendChild(r);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const l=document.createElement("p");return l.innerHTML=e.comments,t.appendChild(l),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,n.setAttribute("aria-label","current page"),t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
